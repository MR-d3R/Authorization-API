import logging
from datetime import datetime
from termcolor import colored
import inspect
import traceback
import requests  

class ColorfulLogger:
    """
    –õ–æ–≥–≥–µ—Ä —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ —Ü–≤–µ—Ç–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ –∞–ª–µ—Ä—Ç–∞–º–∏ –≤ Telegram.
    
    –ê—Ç—Ä–∏–±—É—Ç—ã:
    service_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞.
    tg_api_alert (str): –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞.
    tg_chat_id_alert (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤.
    log_file (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤.
    custom_format (str): –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–æ–≥–∞—Ö.
    
    –ú–µ—Ç–æ–¥—ã:
    log(level, message, *args): –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–≥ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    info(message, *args): –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    debug(message, *args): –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    warning(message, *args): –õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.
    error(message, *args): –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç—ã –≤ Telegram.
    critical(message, *args): –õ–æ–≥–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç—ã –≤ Telegram.
    exception(message, *args): –õ–æ–≥–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç—ã —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π –≤ Telegram.
    """

    def __init__(self, log_file="logs.log", custom_format=None, config=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞.
        
        :param log_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "logs.log").
        :param custom_format: –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é None).
        :param config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ service_name, tg_bot –∏ tg_id_alert.
        """
        self.config = config
        self.service_name = self.config.service_name
        self.tg_api_alert = self.config.tg_bot
        self.tg_chat_id_alert = self.config.tg_id_alert
        self.log_file = log_file
        self.custom_format = custom_format
        self._setup_logger()

    def _setup_logger(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞."""
        self.logger = logging.getLogger("ColorfulLogger")
        self.logger.setLevel(logging.DEBUG)

        file_handler = logging.FileHandler(self.log_file, mode="a", encoding="utf-8")
        file_handler.setLevel(logging.DEBUG)
        
        log_format = self.custom_format or "%(asctime)s [%(levelname)s] %(message)s"
        file_formatter = logging.Formatter(log_format, datefmt="%Y-%m-%d %H:%M:%S")
        file_handler.setFormatter(file_formatter)

        if self.logger.handlers:
            self.logger.handlers.clear()
        self.logger.addHandler(file_handler)

    def _send_telegram_alert(self, message: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –≤ Telegram.
        
        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç.
        """
        if not self.tg_api_alert or not self.tg_chat_id_alert:
            return  

        url = f"https://api.telegram.org/bot{self.tg_api_alert}/sendMessage"
        payload = {
            "chat_id": self.tg_chat_id_alert,
            "text": message
        }
        try:
            response = requests.post(url, data=payload)
            if not response.ok:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –≤ Telegram.")
        except requests.exceptions.RequestException as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram: {e}")

    def log(self, level: str, message: str, *args):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –µ–≥–æ.

        :param level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, INFO, DEBUG).
        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
        :param args: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
        """
        color_map = {
            "INFO": "green",
            "DEBUG": "blue",
            "WARNING": "yellow",
            "ERROR": "red",
            "CRITICAL": "magenta",
        }

        if level not in color_map:
            raise ValueError(f"Unsupported log level: {level}")

        time_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        frame = inspect.currentframe().f_back
        filename = frame.f_code.co_filename
        lineno = frame.f_lineno
        func_name = frame.f_code.co_name

        formatted_message = message % args if args else message
        colored_message = f"{time_str} [{level}] {formatted_message} (Service: {self.service_name}, File: {filename}, Line: {lineno}, Function: {func_name})"
        
        print(colored(colored_message, color_map[level]))


        if level == "INFO":
            self.logger.info(formatted_message)
        elif level == "DEBUG":
            self.logger.debug(formatted_message)
        elif level == "WARNING":
            self.logger.warning(formatted_message)
        elif level == "ERROR":
            self.logger.error(formatted_message)
            if self.tg_api_alert:  
                self._send_telegram_alert(f"üö® –û—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ {self.service_name}: {formatted_message}")
        elif level == "CRITICAL":
            self.logger.critical(formatted_message)
            if self.tg_api_alert:  
                self._send_telegram_alert(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ {self.service_name}: {formatted_message}")

    def info(self, message: str, *args):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        self.log("INFO", message, *args)

    def debug(self, message: str, *args):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        self.log("DEBUG", message, *args)

    def warning(self, message: str, *args):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        self.log("WARNING", message, *args)

    def error(self, message: str, *args):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –≤ Telegram."""
        self.log("ERROR", message, *args)

    def critical(self, message: str, *args):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –≤ Telegram."""
        self.log("CRITICAL", message, *args)

    def exception(self, message: str, *args):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –≤ Telegram.
        
        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ, –æ–ø–∏—Å—ã–≤–∞—é—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
        :param args: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
        """
        error_message = message % args if args else message
        tb = traceback.format_exc()
        full_message = f"{error_message}\n{tb}"
        self.error(full_message)
        if self.tg_api_alert:  
            self._send_telegram_alert(f"‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Å–µ—Ä–≤–∏—Å–µ {self.service_name}:\n{full_message}")

if __name__ == "__main__":
    config = {
        "service_name": "MyService",  
        "tg_bot": "6566841078:AAEBN9f2rDsHModMAmmtykWXbki3th9qajI",   #@ext_test_bot
        "tg_id_alert": "635571791" #–¢–æ–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –º–Ω–µ –≤ –ª–∏—á–∫—É –∞–ª–µ—Ä—Ç–∏—Ç—å !! –°–í–û–õ–û–ß–ò ! 
    }

    logger = ColorfulLogger(custom_format="%(asctime)s [%(levelname)s] %(message)s [%(filename)s:%(lineno)d]", config=config)
    

    logger.info("–≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    logger.debug("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.")
    logger.warning("–≠—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    logger.error("–û—à–∏–±–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: %s", "value")
    
    try:
        1 / 0
    except ZeroDivisionError:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ!")
